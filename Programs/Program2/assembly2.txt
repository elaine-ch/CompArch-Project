#get input floating point number stored in registers 0, 1
LDC 00101
LDR R0
LDC 00100
LDR R1

LDC 10000
MOV R6, R4
#sign bit mask stored in register 4 (0b10000000)
AND R0, R4
LDC 00111
MOV R6, R2
RST R2, R4
#sign bit now stored in R4

#get exponent
LDC 00001
MOV R6, R2
MOV R0, R3
LST R2, R3
LDC 00011
MOV R6, R2
RST R2, R3
#exponent now stored in R3

#get mantissa
LDC 00011
#mantissa bit mask stored in register 6 (0b00000011)
AND R0, R6
MOV R6, R0
#mantissa stored in R0, R1

#adjust exponent for bias
LDC 01111
SUB R3, R6
MOV R6, R3
#adjusted exponent now in R3

#construct int_frac
#check if exp is all zeroes
LDC 00000
CMP R3, R6
BEQ exp_zero
#add buffer
LDC 00001
MOV R6, R2
ORR R2, R0

exp_zero:
#perform shift logic
#if exp <= 10, right shift by 10 - exp
LDC 01010
CMP R3, R6
LDC 00011
MOV R6, R2
CMP R2, R5
BEQ exp_gt_ten

LDC 01010
MOV R6, R2
SUB R3, R2
#left shift msb of mantissa by value of r2
LST R2, R0
#get first r2 bits of lsb of mantissa in lsb position
MOV R2, R3
LDC 01000
SUB R3, R6
MOV R6, R3
MOV R1, R7
RST R3, R7
MOV R7, R3
#add to msb of mantissa
ADD R3, R0
#left shift lsb of mantissa by value of R2
LST R2, R1

#skip gt_ten
LDC 00000
MOV R6, R5
BEQ skip_exp_gt_ten

exp_gt_ten:
#else if exp > 10, left shift by exp - 10

LDC 01010
MOV R6, R2
SUB R2, R3
#right shift lsb of mantissa by value of r3
RST R3, R1
#get last r3 bits of msb of mantissa in msb position
MOV R3, R2
LDC 01000
SUB R2, R6
MOV R6, R2
MOV R0, R7
LST R2, R7
MOV R7, R2
#add to lsb of mantissa
ADD R2, R1
#right shift msb of mantissa by value of R3
RST R3, R0

skip_exp_gt_ten:

#take only bottom 15 bits of r0,r1 by AND with 011…111
#construct sign mask
LDC 00001
MOV R6, R2
LDC 10000
MOV R6, R3
SUB R3, R2
AND R2, R0

#compare sign bit to 0
LDC 00000
MOV R4, R2
CMP R2, R6
BEQ finished
#do two’s complement on top half by 0 - R0 then subtracting 1
MOV R6, R2
SUB R2, R0
LDC 00001
MOV R6, R2
SUB R0, R2
MOV R2, R0
#bit inversion on top half finished
LDC 00000
CMP R1, R6
MOV R6, R3
SUB R3, R1
BEQ overflow

#skip overflow
LDC 00000
MOV R6, R5
BEQ finished

#lsb of answer will overflow doing two’s complement if 00000000 -> 11111111 + 1 -> 100000000
overflow:
LDC 00001
MOV R6, R2
ADD R2, R0

finished:
LDC 00111
STR R0
LDC 00110
STR R1
DON
