# operand one in datmem[9] datmem [8] operand two in datmem[11] datmem[10]
#output floating point number to registers 0, 1
#input of first floating point number in registers 0, 1

LDC 01001
LDC 10000
MOV R6, R2
#sign bit mask stored in register 2 (0b10000000)
AND R0, R2
#sign bit now stored in R4
#adjust sign bit for bias
LDC 01111
MOV R6, R2
MOV R4, R3
SUB R3, R2
LDC 00000
MOV R6, R7
STR R4
#adjusted sign bit 1 now stored in mem[0]
#get exponent 1
LDC 00001
MOV R6, R2
RST R0, R2
MOV R6, R7
STR R5
#exponent1 now stored in mem[1]
#get mantissa 1
LDC 00011
MOV R6, R2
#mantissa bit mask stored in register 2 (0b00000011)
AND R0, R2
MOV R6, R7
STR R0
LDC 00010
MOV R6, R7
STR R5
#mantissa 1 stored in mem[2], mem[3]
#input of second floating point number in registers 0, 1
LDC 10000
MOV R6, R2
#sign bit mask stored in register 2 (0b10000000)
AND R0, R2
#sign bit now stored in R4
#adjust sign bit for bias
LDC 01111
MOV R6, R2
MOV R4, R3
SUB R3, R2
LDC 00100
MOV R6, R7
STR R4
#adjusted sign bit 2 now stored in mem[4]
#get exponent 2
LDC 00001
MOV R6, R2
RST R0, R2
LDC 00101
MOV R6, R7
STR R5
#exponent2 now stored in mem[5]
#get mantissa 2
LDC 00011
MOV R6, R2
#mantissa bit mask stored in register 2 (0b00000011)
AND R0, R2
LDC 00110
MOV R6, R7
STR R0
LDC 00111
MOV R6, R7
STR R5
#mantissa 2 stored in mem[6], mem[7]
#exponent comparison
LDC 00001
LDR R0
LDC 00101
LDR R2
#exponent 1 is on R0 exponent 2 is on R2
#use r7 to hold sign_result
CMP R0, R2
MOV R4, R1
LDC 00011
MOV R6, R4
CMP R1, R4 #compare results of first cmp against 3 (to see if exponent 1 is greater)
BEQ exp_greater
#exp 2 is greater
#set exp1 = exp2
LDC 00001
MOV R6, R7
STR R2
#exp1 in mem[1] updated
MOV R0, R1
MOV R2, R0
MOV R1, R2 #swapping r0 and r2
SUB R0, R2
MOV R5, R3 #store difference between exp in r3
#get mantissa 1 into R0, R1
LDC 00010
LDR R0
LDC 00011
LDR R1
#shift mantissa 1 by diff in exp
RST R1, R3
MOV R1, R5
LDC 01000
MOV R6, R1
SUB R1, R3
MOV R4, R1
LST R0, R1
MOV R5, R1
MOV R4, R2
ADD R1, R2, #shift top half of mantissa to bottom half
RST R0, R3 #shift top half of mantissa
LDC 00010
MOV R6, R7
STR R3
LDC 00011
MOV R6, R7
STR R5
#mantissa 1 updated in mem[2], mem[3]
exp_greater:
#exp 1 is greater
#set exp2 = exp1
LDC 00010
MOV R6, R7
STR R0
#exp1 in mem[5] updated
SUB R0, R2
MOV R5, R3 #store difference between exp in r3
#get mantissa 1 into R0, R1
LDC 00010
LDR R0
LDC 00011
LDR R1
#shift mantissa 1 by diff in exp
RST R1, R3
MOV R1, R5
LDC 01000
MOV R6, R1
SUB R1, R3
MOV R4, R1
LST R0, R1
MOV R5, R1
MOV R0, R2
ADD R1, R2 #move part of top half of mantissa to bottom half
RST R0, R3 #shift top half of mantissa
#mantissa in r0, r5
#mantissa 2 in mem updated
#sign comparison
#get sign from memory
LDC 00000
LDR R0 #sign 1
LDC 00010
LDR R1 #sign 2
LDC 00000
MOV R6, R2
LDC 01101
STR R2
LDC 01100
STR R2
DON